package br.gov.ba.tcm.api.rest.portalservidor;

import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Required;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import br.gov.ba.tcm.api.model.apiconsulta.etcm.Servidor;
import br.gov.ba.tcm.api.model.bdsrh.ServidorLogin;
import br.gov.ba.tcm.api.repository.apiconsulta.etcm.ServidorRepository;
import br.gov.ba.tcm.api.repository.bdsrh.ServidorLoginRepository;
import br.gov.ba.tcm.api.repository.portalServidor.ServidorRecadastramentoRepository;
import br.gov.ba.tcm.api.rest.request.ServidorRecadastramentoRequest;
import io.swagger.annotations.ApiOperation;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping(value = "/portal-servidor/servidores")
public class ServidorRest extends ApiPortalServidor {

	@Autowired
	ServidorRepository servidorRepository;

	@Autowired
	ServidorLoginRepository servidorLoginRepository;

	@Autowired
	ServidorRecadastramentoRepository servidorRepositoryRecadastramento;

	@GetMapping
	@ApiOperation(value = "Retorna uma lista de servidores filtrados por nome ou matricula e/ou paginado 20-20")
	public Page<ServidorLogin> lista(@RequestParam(required = false) String servidor) {
		int page = 0;
		int size = 15;
		PageRequest pageRequest = PageRequest.of(page, size, Sort.Direction.ASC, "nomeServidor");
		if (servidor != null && !servidor.equals("")) {
			return servidorLoginRepository.findByNomeServidorOrMatricula(servidor, servidor, pageRequest);
		}
		return servidorLoginRepository.findAllMatriculaAndNome(pageRequest);
	}

	@GetMapping("/{matricula}")
	@ApiOperation(value = "Retorna uma lista de servidores filtrados por nome e/ou paginado 20-20")
	public Servidor listaByMatricula(@PathVariable String matricula) {
		return servidorRepository.findByMatricula(matricula);
	}

	@PutMapping("/{cpf}")
	@ApiOperation(value = "Atualiza os dados dos servidores cadastrados!")
	public ResponseEntity<Map<String, Object>> atualizar(@PathVariable String cpf,
			ServidorRecadastramentoRequest servidor) {
		Map<String, Object> result = new HashMap<>();
		result.put("code", 404);
		if (servidor.getNuCPF() == null || servidor.getNuCPF().isEmpty()) {
			result.put("msg", "CPF não informado");
			return ResponseEntity.status(404).body(result);
		} else if (servidor.getNomeServidor() == null || servidor.getNomeServidor().isEmpty()) {
			result.put("msg", "Nome não informado");
			return ResponseEntity.status(404).body(result);
		} else if (servidor.getDsLoginUsuario() == null || servidor.getDsLoginUsuario().isEmpty()) {
			result.put("msg", "Login do usuario não informado");
			return ResponseEntity.status(404).body(result);
		}

		br.gov.ba.tcm.api.model.portalservidor.recadastramento.Servidor servidorRecadastramento = servidorRepositoryRecadastramento
				.findByNuCPF(cpf);
		servidorRecadastramento.setNomeServidor(servidor.getNomeServidor());
		servidorRecadastramento.setNulDentificacaoSocial(servidor.getNuIdentificacaoSocial());
		servidorRecadastramento.setNumeroRegistroGeral(servidor.getNumeroRegistroGeral());
		servidorRecadastramento.setSgUFRegistroGeral(servidor.getSgUFRegistroGeral());
		servidorRecadastramento.setNumeroOrgaoRG(servidor.getNumeroOrgaoRG());
		servidorRecadastramento.setDataExpedicaoRG(servidor.getDataExpedicaoRG());
		servidorRecadastramento.setStHabilitacao(servidor.getStHabilitacao());
		servidorRecadastramento.setDataExpedicaoHabilitacao(servidor.getDataExpedicaoHabilitacao());
		servidorRecadastramento.setDtValidadeHabilitacao(servidor.getDtValidadeHabilitacao());
		servidorRecadastramento.setIdUFHabilitacao(servidor.getIdUFHabilitacao());
		servidorRecadastramento.setNivelFuncao(servidor.getNivelFuncao());
		servidorRecadastramento.setNumeroHabilitacao(servidor.getNumeroHabilitacao());
		servidorRecadastramento.setDataExpedicaoCTPS(servidor.getDataExpedicaoCTPS());
		servidorRecadastramento.setNumeroSerieCTPS(servidor.getNumeroSerieCTPS());
		servidorRecadastramento.setNumeroCTPS(servidor.getNumeroCTPS());
		servidorRecadastramento.setIdUF_CTPS(servidor.getIdUF_CTPS());
		servidorRecadastramento.setNumeroCEP(servidor.getNumeroCEP());
		servidorRecadastramento.setNumeroLogradouro(servidor.getNumeroLogradouro());
		servidorRecadastramento.setDsComplemento(servidor.getDsComplemento());
		servidorRecadastramento.setNumeroEndereco(servidor.getNumeroEndereco());
		servidorRecadastramento.setNomeBairro(servidor.getNomeBairro());
		servidorRecadastramento.setSgUFEndereco(servidor.getSgUFEndereco());
		servidorRecadastramento.setNuMunicipio(servidor.getNuMunicipio());
		servidorRecadastramento.setDsEnderecoEletronico(servidor.getDsEnderecoEletronico());
		servidorRecadastramento.setNumeroTelefone(servidor.getNumeroTelefone());
		servidorRecadastramento.setNumeroTelefone2(servidor.getNumeroTelefone2());
		servidorRecadastramento.setNomeMae(servidor.getNomeMae());
		servidorRecadastramento.setNomePai(servidor.getNomePai());
		servidorRecadastramento.setIdRaca(servidor.getIdRaca());
		servidorRecadastramento.setDataNascimento(servidor.getDataNascimento());
		servidorRecadastramento.setSiglaSexo(servidor.getSiglaSexo());
		servidorRecadastramento.setIdNacionalidade(servidor.getIdNacionalidade());
		servidorRecadastramento.setSiglaUFNacimento(servidor.getSiglaUFNacimento());
		servidorRecadastramento.setNuMunicipioNaturalidade(servidor.getNuMunicipioNaturalidade());
		servidorRecadastramento.setIdEscolaridade(servidor.getIdEscolaridade());
		servidorRecadastramento.setIdEstadoCivil(servidor.getIdEstadoCivil());
		servidorRecadastramento.setDsTipoConta(servidor.getDsTipoConta());
		servidorRecadastramento.setNumeroBanco(servidor.getNumeroBanco());
		servidorRecadastramento.setNumeroAgencia(servidor.getNumeroAgencia());
		servidorRecadastramento.setNumeroContaBancaria(servidor.getNumeroContaBancaria());
		servidorRecadastramento.setDsTipoContaAuxiliar(servidor.getDsTipoContaAuxiliar());
		servidorRecadastramento.setNumeroBancoContaAuxiliar(servidor.getNumeroBancoContaAuxiliar());
		servidorRecadastramento.setNumeroAgenciaContaAuxiliar(servidor.getNumeroAgenciaContaAuxiliar());
		servidorRecadastramento.setNumeroContaBancariaAuxiliar(servidor.getNumeroContaBancariaAuxiliar());
		servidorRecadastramento.setDsLoginUsuario(servidor.getDsLoginUsuario());
		
		try {
			servidorRepositoryRecadastramento.save(servidorRecadastramento);
			result.put("code", 200);
			result.put("servidor", servidorRecadastramento);
		} catch (Exception e) {
			result.put("msg", e.getMessage());
			result.put("code", 500);
		}
		return ResponseEntity.ok(result);
	}
		
	

	@PostMapping("/{cpf}")
	@ApiOperation(value = "Grava dados dos servidores!")
	public ResponseEntity<Map<String, Object>> gravar( @PathVariable String cpf, @RequestBody ServidorRecadastramentoRequest servidor) {
		Map<String, Object> result = new HashMap<>();
		result.put("code", 404);
		if (servidor.getNuCPF() == null || servidor.getNuCPF().isEmpty()) {
			result.put("msg", "CPF não informado");
			return ResponseEntity.status(404).body(result);
		} else if (servidor.getNomeServidor() == null || servidor.getNomeServidor().isEmpty()) {
			result.put("msg", "Nome não informado");
			return ResponseEntity.status(404).body(result);
		} else if (servidor.getDsLoginUsuario() == null || servidor.getDsLoginUsuario().isEmpty()) {
			result.put("msg", "Login do usuario não informado");
			return ResponseEntity.status(404).body(result);
		}

		br.gov.ba.tcm.api.model.portalservidor.recadastramento.Servidor servidorRecadatramento = new br.gov.ba.tcm.api.model.portalservidor.recadastramento.Servidor(
				servidor.getNuCPF(), servidor.getNomeServidor(), servidor.getNuIdentificacaoSocial(),
				servidor.getNumeroRegistroGeral(), servidor.getSgUFRegistroGeral(), servidor.getNumeroOrgaoRG(),
				servidor.getDataExpedicaoRG(), servidor.getStHabilitacao(), servidor.getDataExpedicaoHabilitacao(),
				servidor.getDtValidadeHabilitacao(), servidor.getIdUFHabilitacao(), servidor.getNivelFuncao(),
				servidor.getNumeroHabilitacao(), servidor.getDataExpedicaoCTPS(), servidor.getNumeroSerieCTPS(),
				servidor.getNumeroCTPS(), servidor.getIdUF_CTPS(), servidor.getNumeroCEP(),
				servidor.getNumeroLogradouro(), servidor.getDsComplemento(), servidor.getNumeroEndereco(),
				servidor.getNomeBairro(), servidor.getSgUFEndereco(), servidor.getNuMunicipio(),
				servidor.getDsEnderecoEletronico(), servidor.getNumeroTelefone(), servidor.getNumeroTelefone2(),
				servidor.getNomeMae(), servidor.getNomePai(), servidor.getIdRaca(), servidor.getDataNascimento(),
				servidor.getSiglaSexo(), servidor.getIdNacionalidade(), servidor.getSiglaUFNacimento(),
				servidor.getNuMunicipioNaturalidade(), servidor.getIdEscolaridade(), servidor.getIdEstadoCivil(),
				servidor.getDsTipoConta(), servidor.getNumeroBanco(), servidor.getNumeroAgencia(),
				servidor.getNumeroContaBancaria(), servidor.getDsTipoContaAuxiliar(),
				servidor.getNumeroBancoContaAuxiliar(), servidor.getNumeroAgenciaContaAuxiliar(),
				servidor.getNumeroContaBancariaAuxiliar(), servidor.getDsLoginUsuario());
		try {
			servidorRepositoryRecadastramento.save(servidorRecadatramento);
			result.put("code", 200);
			result.put("servidor", servidorRecadatramento);
		} catch (Exception e) {
			result.put("msg", e.getMessage());
			result.put("code", 500);
		}
		return ResponseEntity.ok(result);
	}

}
